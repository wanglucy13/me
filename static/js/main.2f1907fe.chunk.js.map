{"version":3,"sources":["components/Header.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","theme","root","padding","backgroundColor","color","fontFamily","position","headerTitle","margin","fontSize","fontWeight","breakpoints","only","headerBody","props","classes","Grid","className","container","direction","justify","alignItems","item","xs","sm","startDelay","spacing","App","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qQAuFeA,eAjFA,SAAAC,GAAK,MAAK,CACvBC,KAAM,CAEJC,QAAS,SACTC,gBAAiB,qBACjBC,MAAO,QACPC,WAAY,2BACZC,SAAU,YAMZC,YAAY,aACVF,WAAY,SAEZG,OAAQ,SACRC,SAAU,MACVC,WAAY,QACXV,EAAMW,YAAYC,KAAK,MAAQ,CAC9BH,SAAU,QAIdI,WAAY,CAEVL,OAAQ,SACRC,SAAU,UAsDCV,EAjDA,SAACe,GAAW,IAClBC,EAAWD,EAAXC,QACP,OACE,kBAACC,EAAA,EAAD,CACEC,UAAWF,EAAQd,KACnBiB,WAAS,EACTC,UAAU,SACVC,QAAQ,eACRC,WAAW,UAEX,kBAACL,EAAA,EAAD,CACEE,WAAS,EACTC,UAAU,MACVC,QAAQ,eACRC,WAAW,QAEX,kBAACL,EAAA,EAAD,CACEM,MAAI,EAACC,GAAI,GAAIC,GAAI,EACjBP,UAAWF,EAAQR,aAEnB,kBAAC,IAAD,CAAQkB,WAAY,KAApB,mBAKJ,kBAACT,EAAA,EAAD,CACEE,WAAS,EACTC,UAAU,SACVC,QAAQ,eACRC,WAAW,OACXK,QAAS,GAET,kBAACV,EAAA,EAAD,CACEM,MAAI,EAACC,GAAI,EACTN,UAAWF,EAAQF,YAFrB,uGAMA,kBAACG,EAAA,EAAD,CACEM,MAAI,EAACC,GAAI,EACTN,UAAWF,EAAQF,YAFrB,uEChEOc,MARf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,QCKcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCCNC,IAASC,OAAO,kBAAC,IAAD,CAAQC,SAAUC,IAAwB,kBAAE,EAAF,OAAmBC,SAASC,eAAe,SDgH/F,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2f1907fe.chunk.js","sourcesContent":["import React from 'react';\nimport Typist from 'react-typist';\nimport 'react-typist/dist/Typist.css';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\nconst styles = theme => ({\n  root: {\n    // flexGrow: 1,\n    padding: '15% 0%',\n    backgroundColor: 'rgb(219, 171, 171)',\n    color: 'white',\n    fontFamily: 'Anonymous Pro, monospace',\n    position: 'relative',\n    // top: '50%',\n    // left: '50%',\n    // transform: 'translate(-50%, -50%)'\n  },\n\n  headerTitle: {\n    fontFamily: 'Monaco',\n    // position: 'relative',\n    margin: '0 auto',\n    fontSize: '5em',\n    fontWeight: 'bold',\n    [theme.breakpoints.only('xs')]: {\n      fontSize: '2em',\n    },\n  },\n\n  headerBody: {\n    // position: 'relative',\n    margin: '0 auto',\n    fontSize: '2em',\n  },\n\n});\n\nconst Header = (props) => {\n  const {classes} = props;\n  return (\n    <Grid \n      className={classes.root}\n      container\n      direction=\"column\"\n      justify=\"space-around\"\n      alignItems=\"center\"\n    >\n      <Grid \n        container\n        direction=\"row\"\n        justify=\"space-around\"\n        alignItems=\"left\"\n      >\n        <Grid \n          item xs={10} sm={8}\n          className={classes.headerTitle}\n        >\n          <Typist startDelay={1000}>\n            Hi, I'm Lucy!\n          </Typist>\n        </Grid>\n      </Grid>\n      <Grid \n        container\n        direction=\"column\"\n        justify=\"space-around\"\n        alignItems=\"left\"\n        spacing={2}\n      >\n        <Grid \n          item xs={8}\n          className={classes.headerBody}\n        >\n          I'm currently a graduate student studying computer science @ the University of Southern California.\n        </Grid>\n        <Grid \n          item xs={8}\n          className={classes.headerBody}\n        >\n          My favorite things are coffee, food, and Parks and Recreation!\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default withStyles(styles)(Header)","import React from 'react';\nimport Header from './components/Header'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}>< App /></Router>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}